# -*- coding: utf-8 -*-
"""insurance_charges.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/145MI3lcZiXxToapP6MAQnnCXvGXfhQIT
"""

# Re-run this cell
# Import required libraries

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score

# Loading the insurance dataset
insurance= pd.read_csv('insurance.csv')

insurance.head()

# Task #1: Clean up the data!
## - Are there any missing values? x
## - Standardize categories in region x
## - Standardize sex to just two categories x
## - Change smoker column to boolean x
## - Standardize charges data type (Float) x
## - Convert children column to integer x
## - Convert all numeric values to positive x

pd.options.mode.chained_assignment = None

insurance_filled = insurance.dropna()

insurance_filled['region'] = insurance_filled['region'].str.lower()

insurance_filled['sex'].unique()

FEMALE = 'female'
MALE = 'male'
sex_map = {'F': FEMALE, 'woman': FEMALE,'man' : MALE, 'M' : MALE}

insurance_filled['sex'] = insurance_filled['sex'].replace(sex_map)

insurance_filled['smoker'] = (insurance_filled['smoker'] == 'yes')

insurance_filled['charges'] = insurance_filled['charges'].str.strip('$').astype('float64')

insurance_filled['children'] = insurance_filled['children'].astype('int64')

insurance_pos = insurance_filled.apply(lambda x: x.abs() if np.issubdtype(x.dtype, np.number)  else x)

insurance_pos.sample(10)

# Task #2: Scatterplot of relationships between variables and charges.

import matplotlib.pyplot as plt

df = insurance_pos.copy()
plt.scatter(df['smoker'], df['charges'])

# Task #3: Prepare the data for a model fitting

df_new = pd.get_dummies(df, prefix=['region'], columns=['region'])

df_new = df_new.drop(columns=['region_southeast'])

df_new['smoker'] = df_new['smoker'].astype('int64')

df_new['is_male'] = (df_new['sex'] == 'male').astype('int64')
df_new = df_new.drop(columns=['sex'])

df_new = df_new.dropna()

df_new.head()

# Task #4: Fit a linear regression model to our data

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
#from sklearn.kernel_ridge import KernelRidge
from sklearn.metrics import r2_score

# Separate features (X) and target (y)
X = df_new.drop(columns=['charges'])
y = df_new['charges']

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
#mse = mean_squared_error(y_test, y_pred)
r2_score = r2_score(y_test, y_pred)

#print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2_score}")

def preprocess_df(df):
    df_new = pd.get_dummies(df, prefix=['region'], columns=['region'])
    df_new = df_new.drop(columns=['region_southeast'])

    df_new['smoker'] = (df_new['smoker'] == 'yes')
    df_new['smoker'] = df_new['smoker'].astype('int64')

    df_new['is_male'] = (df_new['sex'] == 'male').astype('int64')
    df_new = df_new.drop(columns=['sex'])

    return df_new

# Implement model creation and training here
# Use as many cells as you need

# Task #5: See how model performs on validation dataset
# Subtask - Create helper function to preprocess dataframe

val_df = pd.read_csv('validation_dataset.csv')
input_df = preprocess_df(val_df)

predictions = model.predict(input_df)

validation_data = val_df.copy()

validation_data['predicted_charges'] = predictions

validation_data.loc[validation_data['predicted_charges'] < 1000, 'predicted_charges'] = 1000

validation_data